// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// LrucacheGetHandlerFunc turns a function with the right signature into a lrucache get handler
type LrucacheGetHandlerFunc func(LrucacheGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LrucacheGetHandlerFunc) Handle(params LrucacheGetParams) middleware.Responder {
	return fn(params)
}

// LrucacheGetHandler interface for that can handle valid lrucache get params
type LrucacheGetHandler interface {
	Handle(LrucacheGetParams) middleware.Responder
}

// NewLrucacheGet creates a new http.Handler for the lrucache get operation
func NewLrucacheGet(ctx *middleware.Context, handler LrucacheGetHandler) *LrucacheGet {
	return &LrucacheGet{Context: ctx, Handler: handler}
}

/*
	LrucacheGet swagger:route GET /get/{id} lrucacheGet

# Get value from cache

Retrieves the value associated with the provided key from the cache.
*/
type LrucacheGet struct {
	Context *middleware.Context
	Handler LrucacheGetHandler
}

func (o *LrucacheGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewLrucacheGetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
